[{"categories":["课程报告"],"content":"一、 题目：多表替代加密算法的实现 ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:1:0","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":["课程报告"],"content":"二、 需要完成的任务： 了解多表替代加密的原理 掌握多表替代加密的算法思想 完成多表替代加密的实现 ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:2:0","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":["课程报告"],"content":"三、 具体实现过程： ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:3:0","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":["课程报告"],"content":"基本知识点： 多表代替密码 多表代替密码是由多个简单的代替密码构成。例如，可能有5个被使用的不同的简单代替密码，单独的一个字符用来改变明文的每个字符的位置。其算法可简述为：设密钥为k,明文为m，加密为c，则有加密变换ek(m)=c1c2…cn，其中，ci=mi+ki mod q。本次作业采用了多表代替的经典密码–维吉尼亚密码作为研究对象。 维吉尼亚密码 维吉尼亚密码是使用一系列恺撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。在一个恺撒密码中，字母表中的每一字母都会作一定的偏移，例如偏移量为3时，A就转换为了D、B转换为了E……而维吉尼亚密码则是由一些偏移量不同的恺撒密码组成。 为了生成密码，需要使用表格法。这一表格（如下图所示）包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进行的，在过程中会不断地变换。 ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:3:1","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":["课程报告"],"content":"算法流程： 假设明文为： ATTACKATDAWN 选择某一关键词并重复而得到密钥，如关键词为LEMON时，密钥为： LEMONLEMONLE 对于明文的第一个字母A，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母L。类似地，明文第二个字母为T，在表格中使用对应的E行进行加密，得到密文第二个字母X。以此类推，可以得到： 明文：ATTACKATDAWN 密钥：LEMONLEMONLE 密文：LXFOPVEFRNHR 解密的过程则与加密相反。例如：根据密钥第一个字母L所对应的L行字母表，发现密文第一个字母L位于A列，因而明文第一个字母为A。密钥第二个字母E对应E行字母表，而密文第二个字母X位于此行T列，因而明文第二个字母为T。以此类推便可得到明文。 用数字0-25代替字母A-Z，维吉尼亚密码的加密文法可以写成同余的形式（如下图）。 ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:3:2","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":["课程报告"],"content":"具体实现代码 (Java) package Homework_Vigenere; public class Vigenere { /**大写字母表**/ static String alphabet =\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; /** * 处理密钥 * @param str 字符串 * @param K 密钥 * @return 与str长度相等的密钥字符串 */ public static String dealK(String str,String K){ K=K.toUpperCase();// 将密钥转换成大写 K=K.replaceAll(\"[^A-Z]\", \"\");//去除所有非字母的字符 StringBuilder sb=new StringBuilder(K); String key=\"\"; if(sb.length()!=str.length()){ //如果密钥长度与str不同，则需要生成密钥字符串 if(sb.length()\u003cstr.length()){ //如果密钥长度比str短，则以不断重复密钥的方式生成密钥字符串 while(sb.length()\u003cstr.length()){ sb.append(K); } } //此时，密钥字符串的长度大于或等于str长度 //将密钥字符串截取为与str等长的字符串 key=sb.substring(0, str.length()); } return key; } /** * 根据vigenere密码算法对明文进行加密 * @param P 明文 * @param K 密钥 * @return 密文 */ public static String encrypt(String P,String K){ P=P.toUpperCase();// 将明文转换成大写 P=P.replaceAll(\"[^A-Z]\", \"\");//去除所有非字母的字符 K=dealK(P,K); int len=K.length(); StringBuilder sb=new StringBuilder(); for(int i=0;i\u003clen;i++){ int row= alphabet.indexOf(K.charAt(i));//行号 int col= alphabet.indexOf(P.charAt(i));//列号 int index=(row+col)%26; sb.append(alphabet.charAt(index)); } return sb.toString(); } /** * 根据vigenere密码算法对密文进行解密 * @param C 密文 * @param K 密钥 * @return 明文 */ public static String decrypt(String C,String K){ C=C.toUpperCase();// 将密文转换成大写 C=C.replaceAll(\"[^A-Z]\", \"\");//去除所有非字母的字符 K=dealK(C,K); int len=K.length(); StringBuilder sb=new StringBuilder(); for(int i=0;i\u003clen;i++){ int row= alphabet.indexOf(K.charAt(i));//行号 int col= alphabet.indexOf(C.charAt(i));//列号 int index; if(row\u003ecol){ index=col+26-row; }else{ index=col-row; } sb.append(alphabet.charAt(index)); } return sb.toString(); } public static void main(String args[]){ String P=\"testvigenere\"; String K=\"encrypt\"; String C=encrypt(P,K); System.out.println(\"明文：\"+P); System.out.println(\"密钥：\"+K); System.out.println(\"密文：\"+C); System.out.println(\"解密后：\"+decrypt(C,K)); } } ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:3:3","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":["课程报告"],"content":"实现结果： ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:3:4","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":["课程报告"],"content":"四、 心得体会： 在这次任务查询资料的过程中，我了解了从恺撒密码到多表替代密码这一古典密码的发展史。重点研究了维吉尼亚密码的加解密方式，并顺带了解了一些关于暴力破解这种密码的知识。作为早期的加解密算法，维吉尼亚密码的使用方式简便，可靠程度较高，但仅支持对字母加密，总的来说，不失为一种经典的古典密码。 ","date":"2020-12-10","objectID":"https://vickunwu.github.io/blog/posts/first-post/:4:0","tags":["密码学"],"title":"保密技术报告1 -- 多表替代加密","uri":"https://vickunwu.github.io/blog/posts/first-post/"},{"categories":null,"content":"LoveIt is a clean, elegant but advanced blog theme for Hugo developed by Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. ","date":"2019-08-02","objectID":"https://vickunwu.github.io/blog/about/:0:0","tags":null,"title":"About LoveIt","uri":"https://vickunwu.github.io/blog/about/"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics support  Search engine verification support (Google, Bind, Yandex and Baidu)  CDN for all third-party libraries support  Automatically converted images with Lazy Load by lazysizes Appearance and Layout  /  Responsive layout  /  Mode  A More coerent style beetwen page and sections  Pagination support  Easy-to-use and self-expanding article catalog, while adapting to the mobile side  Multilanguage support and I18N ready  Beautiful CSS animation Social and Comment Systems  Gravatar support by Gravatar  Local Avatar support  Up to 54 social sites supported  Share post support  Disqus comment system support by Disqus  Gitalk comment system support by Gitalk  Valine comment system support by Valine Extended Features  Automatically highlighting code by chroma in Hugo  Extended markdown syntax for Font Awesome icons  Math formula support by Katex  Diagram syntax shortcode support by mermaid  Embedded music player support by APlayer and MetingJS  Bilibili player support  Kinds of admonitions shortcode support  Custom align and float style shortcodes support  Animated typing support by TypeIt  Animated coutdown support by jQuery.countdown  Dynamic to top support by Smooth Scroll … ","date":"2019-08-02","objectID":"https://vickunwu.github.io/blog/about/:0:1","tags":null,"title":"About LoveIt","uri":"https://vickunwu.github.io/blog/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. Thanks to the authors of following resources included in the theme: Font Awesome Animate.css lazysizes Smooth Scroll TypeIt jQuery jQuery.countdown Katex mermaid APlayer MetingJS Gitalk Valine ","date":"2019-08-02","objectID":"https://vickunwu.github.io/blog/about/:0:2","tags":null,"title":"About LoveIt","uri":"https://vickunwu.github.io/blog/about/"}]